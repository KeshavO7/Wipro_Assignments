package com.example.patient_service.service;

import com.example.patient_service.dto.PatientRequest;
import com.example.patient_service.dto.PatientResponse;
import com.example.patient_service.entity.InsuranceInfo;
import com.example.patient_service.entity.Patient;
import com.example.patient_service.exception.NotFoundException;
import com.example.patient_service.repository.PatientRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;

@Service
@RequiredArgsConstructor
@Transactional
public class PatientServiceImpl implements PatientService {

    private final PatientRepository repo;

    @Override
    public PatientResponse create(PatientRequest r) {
        Patient p = mapToEntity(new Patient(), r);
        return mapToResponse(repo.save(p));
    }

    @Override
    public PatientResponse update(Long id, PatientRequest r) {
        Patient existing = repo.findById(id).orElseThrow(() ->
                new NotFoundException("Patient not found: " + id));
        mapToEntity(existing, r);
        return mapToResponse(repo.save(existing));
    }

    @Override
    @Transactional(readOnly = true)
    public PatientResponse get(Long id) {
        return repo.findById(id).map(this::mapToResponse)
                .orElseThrow(() -> new NotFoundException("Patient not found: " + id));
    }

    @Override
    @Transactional(readOnly = true)
    public List<PatientResponse> list(String q) {
        List<Patient> data = (q == null || q.isBlank())
                ? repo.findAll()
                : repo.findByFirstNameContainingIgnoreCaseOrLastNameContainingIgnoreCase(q, q);
        return data.stream().map(this::mapToResponse).toList();
    }

    @Override
    public void delete(Long id) {
        if (!repo.existsById(id)) throw new NotFoundException("Patient not found: " + id);
        repo.deleteById(id);
    }

    /* ------------ mapping helpers ------------ */

    private Patient mapToEntity(Patient p, PatientRequest r) {
        p.setFirstName(r.getFirstName());
        p.setLastName(r.getLastName());
        p.setDateOfBirth(r.getDateOfBirth());
        p.setGender(r.getGender());
        p.setEmail(r.getEmail());
        p.setPhone(r.getPhone());
        p.setAddressLine1(r.getAddressLine1());
        p.setAddressLine2(r.getAddressLine2());
        p.setCity(r.getCity());
        p.setState(r.getState());
        p.setZipCode(r.getZipCode());

        if (r.getInsurance() != null) {
            InsuranceInfo ins = new InsuranceInfo(
                    r.getInsurance().getProvider(),
                    r.getInsurance().getPolicyNumber(),
                    r.getInsurance().getValidTill()
            );
            p.setInsurance(ins);
        } else {
            p.setInsurance(null);
        }
        return p;
    }

    private PatientResponse mapToResponse(Patient p) {
        PatientResponse.Insurance ins = null;
        if (p.getInsurance() != null) {
            ins = PatientResponse.Insurance.builder()
                    .provider(p.getInsurance().getProvider())
                    .policyNumber(p.getInsurance().getPolicyNumber())
                    .validTill(p.getInsurance().getValidTill())
                    .build();
        }
        return PatientResponse.builder()
                .id(p.getId())
                .firstName(p.getFirstName())
                .lastName(p.getLastName())
                .dateOfBirth(p.getDateOfBirth())
                .gender(p.getGender())
                .email(p.getEmail())
                .phone(p.getPhone())
                .addressLine1(p.getAddressLine1())
                .addressLine2(p.getAddressLine2())
                .city(p.getCity())
                .state(p.getState())
                .zipCode(p.getZipCode())
                .insurance(ins)
                .build();
    }
}
